#!/bin/bash

# Exit if a command exits with an error.
set -o errexit

# Run paths and settings.
cd "$(dirname $0)"
scriptLocation=$(pwd)
jar="$scriptLocation/target/routing_simulator-0.0.1-dev-jar-with-dependencies.jar"
#command="java -Xmx4000m -ea:org.freenetproject.routing_simulator.graph.node.SimpleNode -jar $jar"
command="java -Xmx4000m -jar $jar"
plotCommand="gnuplot"
viewCommand="eog"

# Test settings.
testName="8k-sandberg-from-kleinberg"
#intersect-tests are the number of tests to run per request (origin node).
#1 for folding (request), 2 for routing (request and insert) performance.
route="--route=0 --instant-reject=0 --low-uptime=0 --intersect-tests=1"
fold="$route --fold-policy=SANDBERG"
size="8000"

# Plotting commands
plotLink="$plotCommand $scriptLocation/link_length_s_from_k.gnu"
viewLink="$viewCommand plot_link_length.png plot_link_length_log.png"
plotDegree="$plotCommand $scriptLocation/peer_dist_base.gnu $scriptLocation/peer_dist_flat.gnu"
viewDegree="$viewCommand plot_peer_dist_base.png plot_peer_dist_flat.png"
plotHops="$plotCommand $scriptLocation/hops_dist.gnu"
viewHops="$viewCommand plot_hops_dist.png"

# Test result locations.
results="$scriptLocation/results"
topology="$results/topology/$testName"
routing="$results/routing/$testName"
saveGraph="$scriptLocation/graphs/$testName"
baseGraph="$saveGraph/ideal-base"
flatGraph="$saveGraph/flat"

for dir in "$topology" "$routing" "$saveGraph"
do
    mkdir -p "$dir"
done

if [[ ! -f "$baseGraph" ]];
then
    echo "Generating base graph."
    $command --ideal-link --poisson-degree=12 --size "$size" --output-link "$topology/initial" --save-graph "$baseGraph"
else
    echo "Base graph already exists; not generating."
fi

## Fold
for requests in 80000 160000 320000 640000
do
    echo "Folding $requests on Kleinberg."
    $command --load-graph "$baseGraph" --output-link "$topology/requests-$requests" $fold --output-hops "$routing/hops-$requests" --output-route "$routing/routing-$requests" --requests $requests
done


## Plot results

# Plotting uses relative paths
ln -fsT "$scriptLocation/1407_links" "$topology/1407_links"

# Plot
cd "$topology"
$plotLink
#$plotDegree
#cd "$routing"
#$plotHops

# View
cd "$topology"
$viewLink
#$viewDegree
#cd "$routing"
#$viewHops
